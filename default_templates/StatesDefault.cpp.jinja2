#ifndef _{{state.name.upper()}}_HPP_
#define _{{state.name.upper()}}_HPP_

#include <iostream>
#include "{{state.name}}.hpp"
{%- if state.sub_states is not none and state.sub_states|length > 0 %}
{%- for sub_state in state.sub_states %}
#include "{{sub_state.name}}/{{sub_state.name}}ExternalAttributesState.hpp"
#include "{{sub_state.name}}/{{sub_state.name}}.hpp"
{%- endfor %}
{% endif %}
#include "PCMEvents.hpp"

{{state.name}}::{{state.name}}(std::weak_ptr<IState> _parent)
    : IState(_parent) {
  {%- if state.sub_states is not none and state.sub_states|length > 0 %}
  // Below added all states
  {%- for sub_state in state.sub_states %}
  {
    // Creation {{sub_state.name}} state
    {% if sub_state.parent_attributes is not none and sub_state.parent_attributes|length > 0 -%}
    auto {{sub_state.name.lower()}}ExternalAttributesState = std::make_shared<ConnectExternAttributes>();
    {%- for parent_attribute in sub_state.parent_attributes %}
    {% if parent_attribute.state_owner == state -%}
    {{sub_state.name.lower()}}ExternalAttributesState->{{parent_attribute.name}} = attributes_->{{parent_attribute.name}};
    {% else -%}
    {{sub_state.name.lower()}}ExternalAttributesState->{{parent_attribute.name}} = {{state.name.lower()}}ExternalAttributesState->{{parent_attribute.name}};
    {% endif %}
    {%- endfor %}
    auto {{sub_state.name.lower()}}State = std::make_shared<{{sub_state.name}}>(shared_from_this(),
                                                                                {{sub_state.name.lower()}}ExternalAttributesState);
    {% else -%}
    auto {{sub_state.name.lower()}}State = std::make_shared<{{sub_state.name}}>(shared_from_this());
    {% endif -%}
    child_states_.push_back({{sub_state.name.lower()}}State);
  }
  {%- endfor -%}
  {% endif %}
}

{{state.name}}::~{{state.name}}() {
}

void {{state.name}}::entryFrom(std::shared_ptr<IState> _from, const IEvent &_ev) {
  {%- if state.sub_states is not none and state.sub_states|length > 0 %}
  // Below added all states

  {%- for transition in state.initial_transitions() %}
  {%- if (transition.event is not none and transition.event|length > 0) or (transition.condition is not none and transition.condition|length > 0) %}
  {{ "else " if not loop.first }}if (
  {%- if transition.event is not none and transition.event|length > 0 -%}
    {%- for event in transition.event -%}
        {{- "(" if loop.last and transition.event|length > 2 -}}
        typeid({{event.name}}) == typeid(_ev)
        {{- " || " if not loop.last -}}
        {{- ")" if loop.last and transition.event|length > 2 -}}
        {{- " && " if loop.last and transition.condition is not none and transition.condition|length > 0 -}}
    {%- endfor -%}
  {%- endif -%}
  {%- if transition.condition is not none and transition.condition|length > 0 -%}
    {{transition.condition}}(_ev)
  {% endif -%}
  ){%- endif %} {
    {%- for action in transition.action %}
    {%- if action.name is not none -%}
    {{action.name}}(_ev);
    {%- else %}
    [&_ev]() mutable {{action.body}};
    {%- endif %}
    {%- endfor %}
    current_ = {{transition.to_state.name.lower()}}State;
    current_->entryFrom(_from, _ev);
  }
  {%- endfor -%}
  {% endif %}
}

void {{state.name}}::exitTo(std::shared_ptr<IState> _to, const IEvent &_ev) {
  {%- if state.sub_states is not none and state.sub_states|length > 0 %}
  // Below added all states
  {%- for transition in state.final_transitions() %}
  {%- if (transition.event is not none and transition.event|length > 0) or (transition.condition is not none and transition.condition|length > 0) %}
  if (
  {%- if transition.event is not none and transition.event|length > 0 -%}
    {%- for event in transition.event -%}
        {{- "(" if loop.last and transition.event|length > 2 -}}
        typeid({{event.name}}) == typeid(_ev)
        {{- " || " if not loop.last -}}
        {{- ")" if loop.last and transition.event|length > 2 -}}
        {{- " && " if loop.last and transition.condition is not none and transition.condition|length > 0 -}}
    {%- endfor -%}
  {%- endif -%}
  {%- if transition.condition is not none and transition.condition|length > 0 -%}
    {{transition.condition}}(_ev)
  {% endif -%}
  ){% endif %}
  {
    current_->exitTo(_to, _ev);
    current_ = nullptr;
    {{- "return;" if not loop.last }}
  }
  {%- endfor -%}
  {% endif %}
}

bool {{state.name}}::handleEvent(const IEvent & _ev) {
  // Below added all states
  {%- for transition in state.internal_transitions() %}
  {%- if (transition.event is not none and transition.event|length > 0) or (transition.condition is not none and transition.condition|length > 0) %}
  if (
  {%- if transition.event is not none and transition.event|length > 0 -%}
    {%- for event in transition.event -%}
        {{- "(" if loop.last and transition.event|length > 2 -}}
        typeid({{event.name}}) == typeid(_ev)
        {{- " || " if not loop.last -}}
        {{- ")" if loop.last and transition.event|length > 2 -}}
        {{- " && " if loop.last and transition.condition is not none and transition.condition|length > 0 -}}
    {%- endfor -%}
  {%- endif -%}
  {%- if transition.condition is not none and transition.condition|length > 0 -%}
    {{transition.condition}}(_ev)
  {% endif -%}
  ){% endif %}
  {
    current_->exitTo(_to, _ev);
    current_ = nullptr;
    {{- "return;" if not loop.last }}
  }
  {%- endfor -%}
  return false;
}

{% if state.comment is not none and state.comment|length > 0  -%}
std::string {{state.name}}::getStateName() const {
  return IState::getStateName() + std::string(": ") + {{state.comment}};
}
{%- endif %}

#endif  // _{{state.name.upper()}}_HPP_
